import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

public class BabyNames {
    WebDriver driver;

    @BeforeMethod
    public void setUp() {
        WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
    }

    @Test
    public void babyNameList() {
        System.out.println("Navigating to site link");
        driver.get("https://www.momjunction.com/baby-names/hindu/");

        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(60000));
        wait.until(ExpectedConditions.presenceOfElementLocated(By.id("from_functions")));

        List<String> names = new ArrayList<>();
        extractNamesFromPage(names);

        while (hasNextPage()) {
            driver.findElement(By.className("next")).click();
            extractNamesFromPage(names);
        }
    }

    private void extractNamesFromPage(List<String> names) {
    ---------------------------------------------------------------


    import com.fasterxml.jackson.databind.ObjectMapper;
    import io.github.bonigarcia.wdm.WebDriverManager;
    import org.openqa.selenium.By;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;
    import org.openqa.selenium.support.ui.ExpectedConditions;
    import org.openqa.selenium.support.ui.WebDriverWait;
    import org.testng.annotations.AfterMethod;
    import org.testng.annotations.BeforeMethod;
    import org.testng.annotations.Test;

    import java.io.File;
    import java.io.IOException;
    import java.time.Duration;
    import java.util.*;
    import java.util.concurrent.TimeUnit;

    public class BabyNames {
        WebDriver driver;

        @BeforeMethod
        public void setUp() {
            WebDriverManager.chromedriver().setup();
            driver = new ChromeDriver();
            driver.manage().window().maximize();
            driver.manage().timeouts().implicitlyWait(70, TimeUnit.SECONDS);
        }

        @Test
        public void babyNameList() {
            System.out.println("Navigating to site link");
            driver.get("https://www.momjunction.com/baby-names/hindu/");

            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(60000));
            wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//table['from_functions']/tbody/tr")));

            List<String> names = new ArrayList<>();
            extractNamesFromPage(names);


            while (hasNextPage()) {
                driver.findElement(By.className("next")).click();
                extractNamesFromPage(names);
            }
        }


        private void extractNamesFromPage(List<String> names) {
            List<Map<String, String>> nameDetailsList = new ArrayList<>();

            List<WebElement> nameWebElements = driver.findElements(By.cssSelector("#from_functions tbody tr"));

            for (WebElement element : nameWebElements) {
                Map<String, String> map = new HashMap<>();

                String[] arr = element.getText().split(" ");
                map.put("Name", arr.length > 0 ? arr[0] : "");
                map.put("Gender", arr.length > 1 ? arr[1] : "");

                StringBuilder meaning = new StringBuilder();
                for (int i = 2; i < arr.length; i++) {
                    meaning.append(arr[i]).append(" ");
                }
                map.put("Meaning", meaning.toString().trim());

                // Add a condition to filter out unwanted entries
                if (!"Ad".equals(map.get("Gender")) && !"".equals(map.get("Meaning"))) {
                    nameDetailsList.add(map);
                }
            }

            for (Map<String, String> nameDetails : nameDetailsList) {
                System.out.println(nameDetails);
            }
        }


        private boolean hasNextPage() {
            List<WebElement> nextButtonElements = driver.findElements(By.className("next"));
            if (!nextButtonElements.isEmpty()) {
                WebElement nextButton = nextButtonElements.get(0);
                WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
                wait.until(ExpectedConditions.elementToBeClickable(nextButton));
                return true;
            }
            return false;
        }



        @AfterMethod
        public void tearDown() {
            driver.close();
            driver.quit();
        }
    }

#from_functions > tbody > tr > td > a.baby-name-link
#from_functions > tbody > tr > td > span.blue-color fs18
#from_functions > tbody > tr > td > span